//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer gObjectConstants
// {
//
//   struct ObjectConstants
//   {
//       
//       float4x4 gWorlViewProj;        // Offset:    0
//       uint matIndex;                 // Offset:   64
//       float gTime;                   // Offset:   68
//       float4 gColor;                 // Offset:   80
//
//   } gObjectConstants;                // Offset:    0 Size:    96
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      ID      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- ------- -------------- ------
// gObjectConstants                  cbuffer      NA          NA     CB0            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_1
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[0:0][6], immediateIndexed, space=0
dcl_input_ps linear v1.xyzw
dcl_output o0.xyzw
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
//   v1.x <- pin.Color.x; v1.y <- pin.Color.y; v1.z <- pin.Color.z; v1.w <- pin.Color.w; 
//   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
//
#line 46 "C:\Users\myc\Desktop\LearnDirectX12\shader\box.hlsl"
itof r0.x, l(2)
mul r0.x, r0.x, CB0[0][4].y
mov r0.y, l(-0.785398)
add r0.x, r0.y, r0.x
sincos r0.x, null, r0.x
mul r0.x, r0.x, l(0.500000)
add r0.x, r0.x, l(0.500000)  // r0.x <- s

#line 47
mov r1.xyzw, -v1.xyzw
add r1.xyzw, r1.xyzw, CB0[0][5].xyzw
mul r0.xyzw, r0.xxxx, r1.xyzw
add r0.xyzw, r0.xyzw, v1.xyzw  // r0.x <- c.x; r0.y <- c.y; r0.z <- c.z; r0.w <- c.w

#line 48
mov o0.xyzw, r0.xyzw
ret 
// Approximately 13 instruction slots used
